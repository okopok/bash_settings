[user]
	email = username@yandex-team.ru
	name = username
	editor = vim
[github]
	name = username
[credential]
	helper = cache --timeout=600
[i18n]
	commitEncoding = utf8

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	pager = less -FRSX
	whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true
	tool = vimdiff

[push]

	# Use the Git 1.x.x default to avoid errors on machines with old Git
	# installations. To use `simple` instead, add this to your `~/.extra` file:
	# `git config --global push.default simple`. See http://git.io/mMah-w.
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true
[rebase]
	autosquash = true
[pull]
	rebase = true
[rerere]
	enabled = true

[filter "lfs"]
	clean = git lfs clean %f
	smudge = git lfs smudge %f
	required = true
[diff]
	submodule = log
[status]
	submodulesummary = 1
# URL shorthands

[url "git@github.com:"]

	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"


[color]
	branch = auto
	diff = auto
	status = auto
	interactive = auto
	ui = true
	pager = true
[color "branch"]
	branch = auto
	diff = auto
	status = auto
	interactive = auto
	ui = true
	pager = true
[color "branch"]
	current = green reverse
	local = yellow
	remote = cyan
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[alias]
	st = status
	up = pull
	ci = commit
	cist = "!git commit -am 'Commited submodules state'"
	br = branch
	df = diff
	lg = log -p
	co = checkout
	psuh = push
	cleanall = clean -fd
	tree = log --graph --pretty=oneline --decorate
	pom = push origin master
	amend = commit --amend -C HEAD
	hist = log --pretty=format:\"%C(bold yellow)%h%Creset|%Cblue%ai%Creset|%C(green)%an%Creset : %s%d\" --date=short --max-count=20
	logp = log --pretty=format:\"%C(bold yellow)%h%Creset|%C(green)%an%Creset : %s\" --max-count=20
	in = "!git remote update -p; git hist ..@{u}"
	out = log --pretty=format:\"%h %ad %an: %s%d\" --date=short @{u}..
	chp = cherry-pick
	bra = branch -av
	bro = "!git branch -av | grep --color -Ei '(AUTORUAPI)'"
	bl = blame -b -w
	pr = prune
	prpr = remote prune
	f = "!git ls-files | grep -i"
	find = "!git logp --grep"
	grep = grep -Ii
	gr = grep -Ii

	#Grep from root folder:
	gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

	#show all aliases
	la = "!git config -l | grep alias | cut -c 7-"
	#set prefix for branches
	mark-done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
	mark-merged = "!f() { git branch | grep "$1" | cut -c 3- | grep -v merged | xargs -I{} git branch -m {} merged-{}; }; f"

	sl = stash list
	sa = stash apply
	ss = stash save
	sp = stash pop

	#Assume a file as unchanged:
	assume = update-index --assume-unchanged

	#Unassume a file:
	unassume = update-index --no-assume-unchanged

	#Show assumed files:
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"

	#Unassume all the assumed files:
	unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"

	#Assume all:
	assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
	supdate = submodule update --remote --rebase
	spush = push --recurse-submodules=on-demand
	sdiff = !git diff && git submodule foreach 'git diff'
	sreset = !git submodule foreach 'git reset --hard'

	countcommits = show-branch --sha1-name --current
	brcom = !git logp HEAD ^master
